import streamlit as st
import json
import os
from datetime import datetime
from gmail_handler import GmailHandler
from ai_agent import AIAgent
from rag_system import RAGSystem

# Page config
st.set_page_config(
    page_title="Smart Gmail AI Agent", 
    page_icon="📧",
    layout="wide"
)

# Initialize session state
if 'gmail_handler' not in st.session_state:
    st.session_state.gmail_handler = None
if 'ai_agent' not in st.session_state:
    st.session_state.ai_agent = AIAgent()
if 'rag_system' not in st.session_state:
    st.session_state.rag_system = RAGSystem()
if 'user_profile' not in st.session_state:
    st.session_state.user_profile = {}
if 'emails' not in st.session_state:
    st.session_state.emails = []

def load_user_profile():
    """Load user profile from file"""
    if os.path.exists('user_profile.json'):
        with open('user_profile.json', 'r') as f:
            return json.load(f)
    return {}

def save_user_profile(profile):
    """Save user profile to file"""
    with open('user_profile.json', 'w') as f:
        json.dump(profile, f, indent=2)
    st.session_state.user_profile = profile

# Main UI
st.title("🤖 Smart Gmail AI Agent")
st.markdown("---")

# Sidebar for user profile and settings
with st.sidebar:
    st.header("👤 User Profile")
    
    # Load existing profile
    if not st.session_state.user_profile:
        st.session_state.user_profile = load_user_profile()
    
    with st.form("profile_form"):  # Form key is automatically generated by Streamlit
        name = st.text_input("Your Name", value=st.session_state.user_profile.get('name', ''), key="user_name")
        email = st.text_input("Your Email", value=st.session_state.user_profile.get('email', ''), key="user_email")
        role = st.text_input("Your Role/Position", value=st.session_state.user_profile.get('role', ''), key="user_role")
        company = st.text_input("Company", value=st.session_state.user_profile.get('company', ''), key="user_company")
        
        st.subheader("Personal Information")
        bio = st.text_area("Brief Bio/Description", value=st.session_state.user_profile.get('bio', ''), key="user_bio")
        preferences = st.text_area("Email Response Preferences", 
                                 value=st.session_state.user_profile.get('preferences', ''),
                                 help="e.g., Professional tone, include signature, etc.",
                                 key="user_preferences")
        
        if st.form_submit_button("💾 Save Profile"):
            profile = {
                'name': name,
                'email': email,
                'role': role,
                'company': company,
                'bio': bio,
                'preferences': preferences,
                'updated_at': datetime.now().isoformat()
            }
            save_user_profile(profile)
            st.success("✅ Profile saved!")
    
    st.markdown("---")
    st.header("⚙️ Settings")
    
    # Knowledge Base section
    st.subheader("📚 Knowledge Base")
    
    # Add documents
    uploaded_file = st.file_uploader("Upload documents for context", 
                                     type=['txt', 'pdf', 'docx'],
                                     help="Upload documents to improve AI responses",
                                     key="kb_file_uploader")
    
    if uploaded_file:
        with st.form("kb_form"):
            if st.form_submit_button("📤 Add to Knowledge Base"):
                try:
                    st.session_state.rag_system.add_document(uploaded_file)
                    st.success("✅ Document added to knowledge base!")
                except Exception as e:
                    st.error(f"❌ Error: {e}")
    
    # Show knowledge base stats
    kb_stats = st.session_state.rag_system.get_stats()
    if kb_stats['total_documents'] > 0:
        st.info(f"📊 Knowledge Base: {kb_stats['total_documents']} documents")
        
        # Show list of documents
        st.write("**Uploaded Documents:**")
        for doc in st.session_state.rag_system.get_documents():
            st.write(f"- {doc['title']}")
            
        # Clear documents option
        if st.button("🗑 Clear Knowledge Base", key="clear_kb_btn"):
            st.session_state.rag_system.clear_documents()
            st.success("Knowledge base cleared!")
            st.rerun()

    st.markdown("---")
    st.subheader("⚡ AI Settings")
    
    # Response style
    response_style = st.selectbox(
        "📝 Response Style",
        ["Professional", "Casual", "Formal", "Friendly"],
        help="Choose the tone for AI responses",
        key="ai_style_select"
    )
    
    # Auto-reply settings
    auto_reply = st.checkbox("🔄 Enable Auto-Reply", 
                           help="Automatically send generated replies",
                           key="auto_reply_check")
    
    st.markdown("---")
    st.header("📧 Gmail Authentication")
    
    if st.button("🔐 Authenticate Gmail", type="primary", key="auth_btn"):
        try:
            gmail_handler = GmailHandler()
            service = gmail_handler.authenticate()
            st.session_state.gmail_handler = gmail_handler
            st.success("✅ Gmail authenticated successfully!")
        except Exception as e:
            st.error(f"❌ Authentication failed: {e}")
    
    if st.session_state.gmail_handler:
        st.success("🟢 Gmail is connected")
        
        if st.button("📬 Fetch Unread Emails", key="fetch_btn"):
            try:
                emails = st.session_state.gmail_handler.get_unread_emails(limit=10)
                st.session_state.emails = emails
                st.success(f"✅ Found {len(emails)} unread emails")
            except Exception as e:
                st.error(f"❌ Error fetching emails: {e}")
    
    # Show knowledge base stats
    kb_stats = st.session_state.rag_system.get_stats()
    if kb_stats['total_documents'] > 0:
        st.info(f"📊 Knowledge Base: {kb_stats['total_documents']} documents")

# Main content area
col1, col2 = st.columns([1, 1])

# Email Generation Section
col1.header("📝 Generate Email")
with col1:
    with st.form("email_generation_form"):  # Form key is automatically generated by Streamlit
        st.subheader("Email Generation")
        
        # Input section
        col1_input, col2_input = st.columns(2)
        
        with col1_input:
            user_input = st.text_area(
                "📝 Your Input",
                "",
                height=150,
                help="Enter your main input or context for the email",
                key="user_input"
            )
            
        with col2_input:
            prompt = st.text_area(
                "🎯 Prompt",
                "",
                height=150,
                help="Enter a specific prompt or instruction for the email generation",
                key="email_prompt"
            )
        
        # Style and options
        col1_style, col2_style = st.columns(2)
        
        with col1_style:
            email_response_style = st.selectbox(
                "🎨 Response Style",
                ["Professional", "Casual", "Formal", "Friendly"],
                help="Choose the tone for your email",
                key="email_style"
            )
            
        with col2_style:
            include_context = st.checkbox(
                "🔍 Include Knowledge Base Context",
                value=True,
                help="Use relevant context from your knowledge base",
                key="use_context"
            )
        
        if st.form_submit_button("🚀 Generate Email", type="primary"):
            if not user_input:
                st.error("Please provide your input")
                st.stop()
            
            try:
                # Get context if enabled
                context = ""
                if include_context:
                    context = st.session_state.rag_system.get_relevant_context(user_input)
                
                # Generate prompt
                generation_prompt = f"""
                Task: Generate an email based on the following information:
                
                User Input:
                {user_input}
                
                Context:
                {context}
                
                Prompt:
                {prompt}
                
                Style: {email_response_style}
                
                Generate a clear and concise email response.
                """
                
                # Generate email
                generated_email = st.session_state.ai_agent.generate_email(generation_prompt)
                st.success("Email generated successfully!")
                
                # Display result
                st.markdown("---")
                st.header("📋 Generated Email")
                st.text_area(
                    "",
                    value=generated_email,
                    height=200,
                    disabled=True,
                    key="generated_email"
                )
                
                # Copy button
                if st.button("📋 Copy Email", key="copy_email_btn"):
                    st.clipboard(generated_email)
                    st.success("Email copied to clipboard!")
                
            except Exception as e:
                st.error(f"Error generating email: {str(e)}")

with col2:
    st.header("📧 Gmail Authentication")
    

    
    # Response style
    response_style = st.selectbox(
        "📝 Response Style",
        ["Professional", "Casual", "Formal", "Friendly"],
        help="Choose the tone for AI responses"
    )
    
    # Auto-reply settings
    auto_reply = st.checkbox("🔄 Enable Auto-Reply", 
                           help="Automatically send generated replies")
    


# Email selection and processing
if st.session_state.emails:
    st.markdown("---")
    st.header("📮 Select Email to Process")
    
    # Create email selection interface
    email_options = []
    for i, email in enumerate(st.session_state.emails):
        preview = f"From: {email['sender'][:30]}... | Subject: {email['subject'][:40]}..."
        email_options.append(f"{i+1}. {preview}")
    
    selected_idx = st.selectbox(
        "Choose an email:",
        range(len(email_options)),
        format_func=lambda x: email_options[x]
    )
    
    if selected_idx is not None:
        selected_email = st.session_state.emails[selected_idx]
        
        # Display selected email
        with st.expander("📧 Email Details", expanded=True):
            st.write(f"**From:** {selected_email['sender']}")
            st.write(f"**Subject:** {selected_email['subject']}")
            st.write(f"**Date:** {selected_email['date']}")
            st.text_area("**Body:**", value=selected_email['body'], height=150, disabled=True)
        
        # Custom instructions
        col1, col2 = st.columns([2, 1])
        
        with col1:
            custom_instruction = st.text_area(
                "📝 Custom Instructions (Optional)",
                placeholder="e.g., Schedule a meeting for next week, ask for more details, etc.",
                height=100
            )
        
        with col2:
            st.write("**Quick Actions:**")
            if st.button("✅ Accept/Confirm"):
                custom_instruction = "Accept or confirm the request politely"
            if st.button("❓ Ask for Details"):
                custom_instruction = "Ask for more information or clarification"
            if st.button("📅 Suggest Meeting"):
                custom_instruction = "Suggest scheduling a meeting to discuss further"
            if st.button("🙏 Polite Decline"):
                custom_instruction = "Politely decline the request with explanation"
        
        # Generate reply
        if st.button("🚀 Generate Reply", type="primary"):
            try:
                with st.spinner("🤖 AI is generating reply..."):
                    # Get relevant context from RAG system
                    context = st.session_state.rag_system.get_relevant_context(
                        selected_email['body'] + " " + custom_instruction
                    )
                    
                    # Generate reply using AI agent
                    reply = st.session_state.ai_agent.generate_reply(
                        email=selected_email,
                        user_profile=st.session_state.user_profile,
                        custom_instruction=custom_instruction,
                        context=context,
                        style=response_style
                    )
                    
                    st.session_state.generated_reply = reply
                    st.success("✅ Reply generated successfully!")
            except Exception as e:
                st.error(f"❌ Error generating reply: {e}")
        
        # Display and send reply
        if 'generated_reply' in st.session_state:
            st.markdown("---")
            st.header("📤 Generated Reply")
            
            # Show generated reply
            reply_text = st.text_area(
                "Edit reply if needed:",
                value=st.session_state.generated_reply,
                height=200
            )
            
            col1, col2, col3 = st.columns([1, 1, 1])
            
            with col1:
                if st.button("📧 Send Reply", type="primary"):
                    try:
                        st.session_state.gmail_handler.send_reply(
                            selected_email, reply_text
                        )
                        st.success("✅ Reply sent successfully!")
                        
                        # Remove from unread emails
                        st.session_state.emails.remove(selected_email)
                        
                        # Clear generated reply
                        if 'generated_reply' in st.session_state:
                            del st.session_state.generated_reply
                        
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"❌ Failed to send reply: {e}")
            
            with col2:
                if st.button("🔄 Regenerate"):
                    if 'generated_reply' in st.session_state:
                        del st.session_state.generated_reply
                    st.rerun()
            
            with col3:
                if st.button("❌ Cancel"):
                    if 'generated_reply' in st.session_state:
                        del st.session_state.generated_reply
                    st.rerun()

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: gray;'>"
    "🤖 Smart Gmail AI Agent | Powered by Ollama & RAG"
    "</div>", 
    unsafe_allow_html=True
)